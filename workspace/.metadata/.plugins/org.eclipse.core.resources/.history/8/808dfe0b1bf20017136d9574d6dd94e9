package gui_control.WirelessConnection;

import java.io.IOException;
import java.util.ArrayList;

import javax.bluetooth.BluetoothStateException;
import javax.bluetooth.DiscoveryAgent;
import javax.bluetooth.DiscoveryListener;
import javax.bluetooth.LocalDevice;
import javax.bluetooth.RemoteDevice;

import gui_control.WirelessModel.WirelessConnectionModel;

public class WirelessConnection {
	ArrayList<RemoteDevice> remoteDevices;
	LocalDevice localDevice;
	
	final Object inquiryCompletedEvent = new Object();
	
	public WirelessConnection(){
		
	}
	
	public void searchForDevices(){
		
	
	    DiscoveryListener listener = new DiscoveryListener() {
	
	        public void deviceDiscovered(RemoteDevice btDevice, DeviceClass cod) {
	            System.out.println("Device " + btDevice.getBluetoothAddress() + " found");
	            devicesDiscovered.addElement(btDevice);
	            try {
	                System.out.println("     name " + btDevice.getFriendlyName(false));
	            } catch (IOException cantGetDeviceName) {
	            }
	        }
	
	        public void inquiryCompleted(int discType) {
	            System.out.println("Device Inquiry completed!");
	            synchronized(inquiryCompletedEvent){
	                inquiryCompletedEvent.notifyAll();
	            }
	        }
	
	        public void serviceSearchCompleted(int transID, int respCode) {
	        }
	
	        public void servicesDiscovered(int transID, ServiceRecord[] servRecord) {
	        }
	    };
    
    
    	synchronized(inquiryCompletedEvent) {
	        boolean started = LocalDevice.getLocalDevice().getDiscoveryAgent().startInquiry(DiscoveryAgent.GIAC, listener);
	        if (started) {
	            System.out.println("wait for device inquiry to complete...");
	            inquiryCompletedEvent.wait();
	            System.out.println(remoteDevices.size() +  " device(s) found");
	        }
	    }
    }




	/*public void searchForDevices() throws IOException{
		localDevice = LocalDevice.getLocalDevice();
		remoteDevices = localDevice.getDiscoveryAgent().retrieveDevices(DiscoveryAgent.PREKNOWN);
		
		/*for(RemoteDevice r: remoteDevices){
			System.out.println(r.getFriendlyName(false));
			System.out.println(r.getBluetoothAddress());
		}*/
	}*/



	public RemoteDevice[] getRemoteDevices() {
		return remoteDevices;
	}



	public void setRemoteDevices(RemoteDevice[] remoteDevices) {
		this.remoteDevices = remoteDevices;
	}
	
	public ArrayList<WirelessConnectionModel> getWirelessConnectionModels() throws IOException{
		ArrayList<WirelessConnectionModel> result = new ArrayList<WirelessConnectionModel>();
		/*for(RemoteDevice r: remoteDevices){
			WirelessConnectionModel m = new WirelessConnectionModel(r.getFriendlyName(false),r.getBluetoothAddress());
			
			result.add(m);
		}*/
		
		return result;
	}



	public LocalDevice getLocalDevice() {
		return localDevice;
	}



	public void setLocalDevice(LocalDevice localDevice) {
		this.localDevice = localDevice;
	}
	
	
}
