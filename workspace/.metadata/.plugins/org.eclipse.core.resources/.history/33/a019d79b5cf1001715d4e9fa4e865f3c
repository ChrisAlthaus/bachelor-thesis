package gui_control.Database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;

import gui_control.MovingBarSideModel.MovingBarSideModel;
import gui_control.ScenarioModel.ScenarioModel;
import javafx.scene.paint.Color;

public class Database {
	
	public Database(){
		
	}
	
	public void init() throws SQLException{
		createTables();
	}
	
	public static Connection connect(){
		Connection c = null;
		
		try {
			c = DriverManager.getConnection("jdbc:sqlite:database.db");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("Connection to SQLite has been established.");
		return c;
	}
	
	public void createTables() throws SQLException{
		Connection c = connect();
		if(c==null){
			System.out.println("Connection has not been established.");
			return;
		}
		Statement stmt = null;

		
		stmt = c.createStatement();
        String sql = "CREATE TABLE IF NOT EXISTS MOVINGBAR " +
                       "(NAME 			TEXT  PRIMARY KEY     NOT NULL," +
                       " DISPLAYCOLOR   TEXT    NOT NULL, " + 
                       " REFERENCECOLOR TEXT     NOT NULL, " + 
                       " MODE TEXT     NOT NULL, " + 
                       " REFERENCEVALUE INT NOT NULL, " + 
                       " STEPSIZE INT NOT NULL)"; 
        stmt.executeUpdate(sql);
        
        stmt = c.createStatement();
        sql = "CREATE TABLE IF NOT EXISTS MODES " +
                       "(NAME 			TEXT  PRIMARY KEY     NOT NULL)"; 
        stmt.executeUpdate(sql);
        
        stmt = c.createStatement();
        sql = "CREATE TABLE IF NOT EXISTS SCENARIOS" +
                       "(NAME 			TEXT  PRIMARY KEY     NOT NULL,"+
                       " REQUESTURL   TEXT NOT NULL, " + 
                       " PATHXML   TEXT, " + 
                       " PATHJSON TEXT, " + 
                       " CREATIONDATE TEXT     NOT NULL, " + 
                       " UPDATEDURATION REAL NOT NULL)";
        stmt.executeUpdate(sql);
       
        
        stmt.close();
        c.close();
        
	}
	
	public void insertMovingBarSideModel(MovingBarSideModel m) throws SQLException{
		Connection c = connect();
		//if(c==null)return;
		Statement stmt = null;
		
		c.setAutoCommit(false);

        stmt = c.createStatement();
        String sql = "INSERT OR REPLACE INTO MOVINGBAR (NAME,DISPLAYCOLOR,REFERENCECOLOR,MODE,REFERENCEVALUE,STEPSIZE) " +
                        "VALUES ('"+m.getName()+"', '"+String.valueOf(m.getQuantityColor().getRGB())+"', '" 
                        		+String.valueOf(m.getReferenceColor().getRGB())+"', '"
                        			+m.getMode()+"', "+m.getReferenceValue()+", "+m.getStepSize()+");"; 
        
        
        
        stmt.executeUpdate(sql);
        stmt.close();
        c.commit();
        c.close();
        
        System.out.println("Successfully inserted data.");
	}
	
	public void insertModes(ArrayList<String> modes) throws SQLException{
		Connection c = connect();
		//if(c==null)return;
		Statement stmt = null;
		
		c.setAutoCommit(false);
		stmt = c.createStatement();
		
		for(String mode: modes){
			String sql = "INSERT OR REPLACE INTO MODES (NAME) " +
                    "VALUES ('"+ mode + "');"; 
			
			stmt.executeUpdate(sql);
		}
		
		 stmt.close();
	     c.commit();
	     c.close();
	     
	     System.out.println("Successfully inserted data.");
	}
	
	public void insertScenarios(ArrayList<ScenarioModel> scenarios) throws SQLException{
		Connection c = connect();
		//if(c==null)return;
		Statement stmt = null;
		
		c.setAutoCommit(false);
		stmt = c.createStatement();
		
		for(ScenarioModel s: scenarios){
			String sql = "INSERT OR REPLACE INTO SCENARIOS (NAME,REQUESTURL,PATHXML,PATHJSON,CREATIONDATE,UDPATEDURATION) " +
                    "VALUES ('"+s.getName()+"', '"+s.getRequestURL()+"'," 
        			+s.getPathToXML()+", "+s.getPathToJson()+", '"+s.getCreationDate().toString()+"','"
                    +s.getUpdateDuration()+" ');"; 
			System.out.println(sql);
			stmt.executeUpdate(sql);
		}
		
		 stmt.close();
	     c.commit();
	     c.close();
	     
	     System.out.println("Successfully inserted data.");
	}
	
	
	public MovingBarSideModel getMovingBarSide(String name) throws SQLException{
		Connection c = connect();
		//if(c==null)return;
		Statement stmt = null;
		
		c.setAutoCommit(false);
		
		stmt = c.createStatement();
	    ResultSet rs = stmt.executeQuery( "SELECT * FROM MOVINGBAR "
	    	                              + "WHERE NAME IS" + name + ";" );
	    
	   
	    if(rs.next()){
		    String nameIdentifier = rs.getString("name");
			String quantityColor= rs.getString("displaycolor");
			String referenceColor= rs.getString("referencecolor");
			String mode= rs.getString("mode");;
			int referenceValue = rs.getInt("referencevalue");
			int stepSize = rs.getInt("stepsize");	
			
			MovingBarSideModel result = new MovingBarSideModel(nameIdentifier,quantityColor,referenceColor,mode,
					referenceValue,stepSize);
			
			rs.close();
		    stmt.close();
		    c.close();
			return result;
	    }else{
	    	rs.close();
	        stmt.close();
	        c.close();
	        
	    	System.out.println("No entry in database.");
	    	return null;
	    }
	}
	
	
	public ArrayList<String> getModes() throws SQLException{
		Connection c = connect();
		//if(c==null)return;
		Statement stmt = null;
		
		c.setAutoCommit(false);
		
		stmt = c.createStatement();
	    ResultSet rs = stmt.executeQuery( "SELECT * FROM MODES;" );
	    
	    ArrayList<String> result = new ArrayList<String>();
	   
	    while(rs.next()){
		    String mode = rs.getString("name");
		    result.add(mode);
	    }
	    
	    rs.close();
	    stmt.close();
	    c.close();
	    return result;
	}
	
	
	public ArrayList<ScenarioModel> getScenarios() throws SQLException{
		Connection c = connect();
		//if(c==null)return;
		Statement stmt = null;
		
		c.setAutoCommit(false);
		
		stmt = c.createStatement();
	    ResultSet rs = stmt.executeQuery( "SELECT * FROM SCENARIOS;" );
	    
	    ArrayList<ScenarioModel> result = new ArrayList<ScenarioModel>();
	 
	    while(rs.next()){
		    
			String nameIdentifier = rs.getString("name");
			String requestURL = rs.getString("requesturl");
			String pathToXML= rs.getString("pathxml");
			String pathToJson= rs.getString("pathjson");
			String creationDate= rs.getString("creationdate");
			double updateDuration = rs.getDouble("updateduration");
			
			ScenarioModel s = new ScenarioModel(nameIdentifier, requestURL, pathToXML, pathToJson, creationDate,updateDuration);
			result.add(s);
			
	    }
	    
	    rs.close();
		stmt.close();
		c.close();
		return result;
	    
	}
	
}

	

